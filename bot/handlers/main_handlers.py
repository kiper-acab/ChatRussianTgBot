__all__ = ()

import aiogram
import aiogram.filters
import aiogram.fsm.context
import aiogram.fsm.state
import database.requests
import keyboards


router = aiogram.Router()


class AnswerDictionaryWords(aiogram.fsm.state.StatesGroup):
    user_answer = aiogram.fsm.state.State()
    correct_answer = aiogram.fsm.state.State()


class AnswerAccentWord(aiogram.fsm.state.StatesGroup):
    user_answer = aiogram.fsm.state.State()
    correct_answer = aiogram.fsm.state.State()


class EgeTask(aiogram.fsm.state.StatesGroup):
    user_answer = aiogram.fsm.state.State()
    correct_answer = aiogram.fsm.state.State()


@router.message(aiogram.filters.CommandStart())
async def command_start(message: aiogram.types.Message):
    await database.requests.set_user(
        message.from_user.id,
        message.from_user.first_name,
    )
    await message.answer(
        (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! "
            "–Ø <b>–†—É—Å—è</b> ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π "
            "–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É! üìö‚ú®\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é, —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è "
            "—Å –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π –∏ –ø–æ–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞. "
            "–ê –µ—â—ë ‚Äî —É—Å—Ç—Ä–æ—é –Ω–µ–±–æ–ª—å—à–∏–µ —Ç–µ—Å—Ç—ã, "
            "—á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è! üî•\n\n"
            "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
            "  ‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∑–Ω–∞–Ω–∏—è –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏</b>\n"
            "  ‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö —Å–ª–æ–≤</b>\n"
            "  ‚úÖ <b>–î–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ï–ì–≠</b>\n\n"
            "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ! üëá"
        ),
        reply_markup=keyboards.main,
        parse_mode="HTML",
    )


@router.message(aiogram.F.text == keyboards.main.keyboard[0][0].text)
async def dictionary_word(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    random_word = await database.requests.get_vocabulary_word()
    await state.update_data(correct_answer=random_word.normal_form)
    await state.set_state(AnswerDictionaryWords.user_answer)
    await message.answer(
        f"–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—à–µ—Ç—Å—è —Å–ª–æ–≤–æ: <b>{random_word.missing_form}</b>?",
        parse_mode="HTML",
    )


@router.message(aiogram.F.text == keyboards.main.keyboard[0][1].text)
async def accent_words(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    random_word = await database.requests.get_accent_word()
    await state.update_data(correct_answer=random_word.accented_form)
    await state.set_state(AnswerAccentWord.user_answer)
    await message.answer(
        (
            "\n<pre>–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã, "
            "–≥–¥–µ –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é "
            "—Å—Ç–∞–≤–∏—Ç—å —É–¥–∞—Ä–µ–Ω–∏–µ</pre>"
            "–ö—É–¥–∞ –ø–∞–¥–∞–µ—Ç —É–¥–∞—Ä–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–µ: "
            f"<b>{random_word.normal_form}</b>?"
        ),
        parse_mode="HTML",
    )


@router.message(aiogram.F.text == keyboards.main.keyboard[1][0].text)
async def command_profile(message: aiogram.types.Message):
    user = await database.requests.get_user(message.from_user.id)
    await message.answer(
        f"üë§–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.first_name}\n"
        "\n"
        f"‚≠êÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {user.points}\n"
        "\n"
        f"‚úÖ –†–µ—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user.count_comlited_tasks}",
    )


@router.message(AnswerDictionaryWords.user_answer)
async def get_answer(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(user_answer=message.text)
    data = await state.get_data()
    if data["user_answer"].lower().strip() == data["correct_answer"]:
        await database.requests.update_user_points(message.from_user.id, 100)
        user = await database.requests.get_user(message.from_user.id)

        await message.answer(
            "–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n"
            "üèÜ –ù–∞–≥—Ä–∞–¥–∞: 100 –±–∞–ª–ª–æ–≤\n\n"
            f"‚≠êÔ∏è –ë–∞–ª–ª—ã: {user.points}",
            reply_markup=keyboards.keyboard_after_dictionary_answer,
        )

    else:
        await message.answer(
            "–≠—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æüò¥\n\n"
            f"üëâ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data['correct_answer']}",
            reply_markup=keyboards.keyboard_after_dictionary_answer,
        )

    await state.clear()


@router.message(AnswerAccentWord.user_answer)
async def get_answer_accent_words(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(user_answer=message.text)
    data = await state.get_data()
    if data["user_answer"].strip() == data["correct_answer"]:
        await database.requests.update_user_points(message.from_user.id, 100)
        user = await database.requests.get_user(message.from_user.id)

        await message.answer(
            "–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n"
            "üèÜ –ù–∞–≥—Ä–∞–¥–∞: 100 –±–∞–ª–ª–æ–≤\n\n"
            f"‚≠êÔ∏è –ë–∞–ª–ª—ã: {user.points}",
            reply_markup=keyboards.keyboard_after_accent_answer,
        )

    else:
        await message.answer(
            "–≠—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æüò¥\n\n"
            f"üëâ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data['correct_answer']}",
            reply_markup=keyboards.keyboard_after_accent_answer,
        )

    await state.clear()


@router.message(aiogram.F.text == keyboards.main.keyboard[1][2].text)
async def get_leaders(message: aiogram.types.Message):
    leaders = await database.requests.get_top_users()
    message_for_user = "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤: \n"
    for leader in range(1, len(leaders) + 1):
        message_for_user += (
            f"{leader}. {leaders[leader - 1].points} - "
            f"{leaders[leader - 1].first_name}\n"
        )

    await message.answer(f"`{message_for_user}`", parse_mode="MarkdownV2")


@router.message(aiogram.F.text == keyboards.main.keyboard[1][1].text)
async def ege_tasks(message: aiogram.types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –Ω–∞—Ä–µ—à–∏–≤–∞–Ω–∏—è‚úçÔ∏è",
        reply_markup=keyboards.ege_tasks_keyboard,
    )


@router.message(aiogram.F.text == keyboards.main.keyboard[2][0].text)
async def theory_for_assignments(message: aiogram.types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ–±—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å:",
        reply_markup=keyboards.keyboard_teory_to_task,
    )


@router.message(
    aiogram.F.text == keyboards.keyboard_teory_to_task.keyboard[0][0].text,
)
async def return_to_main(message: aiogram.types.Message):
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
        reply_markup=keyboards.main,
    )
